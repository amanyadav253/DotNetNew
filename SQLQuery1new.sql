use AdventureWorks2016

SELECT WorkOrderID, SUM(ActualResourceHrs) AS TotalHoursPerWorkOrder  FROM Production.WorkOrderRouting GROUP BY WorkOrderIDSELECT WorkOrderID, SUM(ActualResourceHrs) AS TotalHoursPerWorkOrder  FROM Production.WorkOrderRouting WHERE WorkOrderID <50 GROUP BY  WorkOrderIDSELECT Class, AVG (ListPrice) AS 'AverageListPrice' FROM Production.Product GROUP BY ClassSELECT [Group],SUM(SalesYTD) AS 'TotalSales' FROM Sales.SalesTerritory  WHERE [Group] LIKE 'N%' OR [Group] LIKE 'E%' GROUP BY ALL [Group]SELECT Name,CountryRegionCode,SUM(SalesYTD) AS TotalSales FROMSales.SalesTerritory WHERE Name <> 'Australia' AND Name<> 'Canada'GROUP BY Name,CountryRegionCode WITH CUBESELECT Name, CountryRegionCode,SUM(SalesYTD) AS TotalSalesFROM Sales.SalesTerritoryWHERE Name <> 'Australia' AND Name <> 'Canada'  GROUP BY Name,CountryRegionCodeWITH ROLLUPSELECT AVG([UnitPrice]) AS AvgUnitPrice,MIN([OrderQty])AS MinQty,  MAX([UnitPriceDiscount]) AS MaxDiscountFROM Sales.SalesOrderDetail;SELECT SalesOrderID, AVG(UnitPrice) AS AvgPriceFROM Sales.SalesOrderDetail; -- Returns ErrorSELECT MIN(OrderDate)AS Earliest,MAX(OrderDate) AS Latest  FROM Sales.SalesOrderHeader;use Amancreate table EmpSalary(id int primary key,EmpName varchar(50),Department varchar(50),Category char(1),Salary money)insert into EmpSalary values(1,'Bhavesh Patel','IT','A',50000)insert into EmpSalary values(2,'Sonia Sharma','Sales','A',30000)insert into EmpSalary values(3,'Jayesh Mehta','IT','B',15000)insert into EmpSalary values(4,'Kalpesh Thakkar','Sales','B',30000)insert into EmpSalary values(5,'Anupam Surve','IT','C',10000)insert into EmpSalary values(6,'Nadeem Khan','Sales','C',10000)insert into EmpSalary values(7,'Rohan Koli','Sales','B',15000)insert into EmpSalary values(8,'Alisha Khera','IT','A',40000)select * from EmpSalaryselect Department, Category, SUM(Salary), COUNT(EmpName) as 'No.of Employees' from EmpSalary group by Department,Category having SUM(Salary)<=20000select Department, SUM(Salary) as TotalSalary from EmpSalary group by Department having SUM(Salary)>100000select Department, Category, SUM(Salary) as TotalSalary from EmpSalary group by rollup(Department,Category)select Department, Category, SUM(Salary) as TotalSalary from EmpSalary group by cube(Department,Category)select Department, Category, SUM(Salary) as TotalSalary from EmpSalary group by grouping sets(Department,Category)select * from testselect * from childinsert into test values('user6',6)insert into child values(7,'child4',4)select a.username,b.name from test a left outer join child b on a.id=b.test_idcreate table Products(ProductId int,Name varchar(50),Type varchar(50),PurchaseDate date)insert into Products values(105,'Product5','Stationary','2021-12-25')create table NewProducts(ProductId int,Name varchar(50),Type varchar(50),PurchaseDate date)insert into NewProducts values(102,'NewProduct2','Hardware','2022-01-26')insert into NewProducts values(103,'NewProduct3','Hardware','2022-01-14')insert into NewProducts values(107,'NewProduct7','Hardware','2022-01-27')insert into NewProducts values(108,'NewProduct8','Stationary','2022-01-31')select * from Productsselect * from NewProductsMERGE INTO Products AS P1USINGNewProducts AS P2ON P1.ProductId = P2.ProductIdWHEN MATCHED THENUPDATE SETP1.Name = P2.Name,  P1.Type = P2.Type,P1.PurchaseDate = P2.PurchaseDateWHEN NOT MATCHED THENINSERT (ProductId, Name, Type, PurchaseDate)VALUES (P2.ProductId, P2.Name, P2.Type, P2.PurchaseDate)  WHEN NOT MATCHED BY SOURCE THENDELETEOUTPUT $action, Inserted.ProductId, Inserted.Name, Inserted.Type,Inserted.PurchaseDate, Deleted.ProductId,Deleted.Name, Deleted.Type,  Deleted.PurchaseDate;create view vwEmpSalary asselect * from EmpSalary goselect * from vwEmpSalaryinsert into vwEmpSalary values(9,'Manasi Khunna','Sales','C',10000)CREATE VIEW vwTestChildASselect t.username,c.name from test t inner join child c on t.id=c.test_id select * from vwTestChild insert into vwTestChild values('user5','child6')--error: Msg 4405, Level 16, State 1, Line 130 --View or function 'vwTestChild' is not updatable because the modification affects multiple base tables. sp_helptext vwEmpSalary --non-parameterised stored procedure create proc spEmpSal as select * from EmpSalary exec spEmpSal --parameterised stored procedure create procedure spEmpBySal @sal int as select * from EmpSalary where Salary=@sal exec spEmpBySal 50000